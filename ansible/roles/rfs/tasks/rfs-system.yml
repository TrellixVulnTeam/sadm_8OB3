- name: Pacstrap the RFS system
  command:
    cmd: 'pacstrap -c -d "{{ rfs_staging }}" --needed
          base linux linux-firmware vim openssh rxvt-unicode-terminfo
          bind-tools'
  args:
    creates: '{{ rfs_staging }}/etc/arch-release'
  notify: restart systemd-nspawn@rfs

- name: Enable ssh and systemd-resolved
  command: 'systemctl --root "{{ rfs_staging }}" enable
            systemd-networkd systemd-resolved sshd'
  notify: restart systemd-nspawn@rfs

# SSH configuration is already installed in the "base" role but we also have to
# do some of it here first, to bootstrap the first connection to RFS that will
# install the "base" role.
- name: Ensure that sshd looks for authorized_keys2
  lineinfile:
    path: '{{ rfs_staging }}/etc/ssh/sshd_config'
    regex: '^#?AuthorizedKeysFile'
    line: 'AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2'

- name: Lookup whether authorized_keys2 is present in the host
  stat:
    path: '/root/.ssh/authorized_keys2'
  register: authorized_keys2

- name: Copy authorized_keys2
  when: authorized_keys2.stat.exists
  copy:
    remote_src: true
    src: '/root/.ssh/authorized_keys2'
    dest: '{{ rfs_staging }}/root/.ssh/'

- name: Add rfs to /var/lib/machines
  file:
    path: '/var/lib/machines/rfs'
    src: '{{ rfs_staging }}'
    state: link
  notify: restart systemd-nspawn@rfs

- name: Add rfs container nspawn config
  template:
    src: 'rfs.nspawn'
    dest: '/etc/systemd/nspawn/'
  notify: restart systemd-nspawn@rfs

- name: Add rfs container network config
  template:
    src: 'rfs.network'
    dest: '/etc/systemd/network/'
  notify:
    - restart networkd
    - restart systemd-nspawn@rfs

- name: Start RFS
  systemd:
    name: systemd-nspawn@rfs
    state: started
    enabled: true

- name: Enable machines target
  systemd:
    name: machines.target
    enabled: true
